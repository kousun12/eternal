{"name":"the music while the music lasts","nodes":[{"id":"73e07906-fbbd-4b61-be30-3e31cf2c0b0e","type":"PerformanceRNNNode","x":539.358974358974,"y":234.53846153846143,"state":{}},{"id":"5be76875-83f9-4811-8ada-a4f28521bfdb","type":"number","x":266.20512820512795,"y":265.6153846153845,"state":{"value":1}},{"id":"b4f03856-5c62-4b63-aa12-8ebaf391e4fb","type":"ScaleNode","x":27.89743589743557,"y":178.53846153846143,"state":{}},{"id":"066a0f52-d9d6-4bfb-837c-29b30bcb4e1b","type":"ChromaNode","x":266.20512820512795,"y":184.61538461538453,"state":{}},{"id":"f501fceb-832a-410a-9bc8-1faf1713a0ed","type":"string","x":-209.564102564103,"y":178.53846153846143,"state":{"value":"D minor hexatonic"}},{"id":"cc09a370-193e-453a-929a-5dd7dc2523ea","type":"MidiOutNode","x":266.20512820512795,"y":414.6153846153845,"state":{}},{"id":"9b8c8021-70b7-4695-8208-8b1bc7b64ec5","type":"string","x":-209.564102564103,"y":510.8461538461547,"state":{"value":"This graph uses a TensorFlow model trained over Yamaha e-Piano competition data to output MIDI data to a MIDI-out device connected to your computer. If you don't have a midi-out device connected, this won't do anything, but you can try one of the soundfont examples that use this RNN model, though midi devices tend to sound the best.\n\nRecommended virtual instrument is a tenor choir. It is the most eternal. and eliot tells me that you are the music while the music lasts."},"title":"README"},{"id":"4187d10a-3d94-4962-80a2-2e5987aa565b","type":"string","x":-209.564102564103,"y":612.4957264957272,"state":{"value":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.1415926535897932384626433832795\n#define TWO_PI 6.28318530718\n\nuniform vec2 u_resolution;\nuniform float u_time;\nuniform sampler2D ms_tex;\n\n// LIGHT Functions and Structs\nstruct Light { vec3 ambient, diffuse, specular; };\nstruct DirectionalLight { Light emission; vec3 direction; };\nstruct PointLight { Light emission; vec3 position; };\nstruct Material { Light bounce; vec3 emission; };\n\nvoid computeLight(in DirectionalLight _light, in Material _material, in vec3 _pos, in vec3 _normal, inout Light _accumulator ) {\n  _accumulator.ambient += _light.emission.ambient;\n  float diffuseFactor = max(0.0,dot(_normal,-_light.direction));\n  _accumulator.diffuse += _light.emission.diffuse * diffuseFactor;\n  if (diffuseFactor > 0.0) {\n    vec3 reflectVector = reflect(_light.direction, _normal);\n    float specularFactor = max(0.0,dot(normalize(_pos), reflectVector));\n    _accumulator.specular += _light.emission.specular * specularFactor;\n  }\n}\n\nvoid computeLight(in PointLight _light, in Material _material, in vec3 _pos, in vec3 _normal, inout Light _accumulator ) {\n  float dist = length(_light.position - _pos);\n  vec3 lightDirection = (_light.position - _pos)/dist;\n\n  _accumulator.ambient += _light.emission.ambient;\n\n  float diffuseFactor = max(0.0,dot(lightDirection,_normal));\n  _accumulator.diffuse += _light.emission.diffuse * diffuseFactor;\n\n  if (diffuseFactor > 0.0) {\n    vec3 reflectVector = reflect(-lightDirection, _normal);\n    float specularFactor = max(0.0,dot(-normalize(_pos), reflectVector));\n    _accumulator.specular += _light.emission.specular * specularFactor;\n  }\n}\n\nvec3 calculate(in Material _material, in Light _light){\n  vec3 color = vec3(0.0);\n  color += _material.emission;\n  color += _material.bounce.ambient * _light.ambient;\n  color += _material.bounce.diffuse * _light.diffuse;\n  color += _material.bounce.specular * _light.specular;\n  return color;\n}\n\nvec3 sphereNormal (vec2 st) {\n  vec2 ost = st;\n  st = fract(st)*2.0-1.0;\n  vec3 ret;\n  ret.xy = sqrt(st * st) * sign(st);\n  ret.z = sqrt(abs(1.0 - dot(ret.xy,ret.xy)));\n\n  vec4 tex = texture2D(ms_tex, ost);\n  vec3 bumps;\n  bumps.xy = sqrt(tex.xy * tex.xy) * sign(tex.xy);\n  bumps.z = sqrt(abs(1.0 - dot(tex.xy,tex.xy)));\n  ret += bumps * 0.5;\n  return ret * 0.5 + 0.5;\n}\n\n\n\nfloat circle (vec2 st, float radius) {\n  vec2 pos = vec2(0.5)-st;\n  return smoothstep(1.0-radius,1.0-radius+radius*0.2,1.-dot(pos,pos)*PI);\n}\n\n\n\nLight l = Light(vec3(0.0),vec3(0.0),vec3(0.0));\nMaterial m = Material(Light(vec3(.0),vec3(0.960,0.960,0.960),vec3(0.3)),vec3(0.0));\nDirectionalLight pLight = DirectionalLight(Light(vec3(0.),vec3(0.775,0.506,0.424),vec3(0.500,0.373,0.354)),vec3(1.000,0.996,0.986));\n\n\nvoid main(){\n  vec2 st = gl_FragCoord.xy/u_resolution.xy;\n  st = (st-.5)*1.088+.5;\n  if (u_resolution.y > u_resolution.x ) {\n    st.y *= u_resolution.y/u_resolution.x;\n    st.y -= (u_resolution.y*.5-u_resolution.x*.5)/u_resolution.x;\n  } else {\n    st.x *= u_resolution.x/u_resolution.y;\n    st.x -= (u_resolution.x*.5-u_resolution.y*.5)/u_resolution.y;\n  }\n  vec3 color = vec3(0.);\n\n  st = vec2(0.5)-st;\n\n  float t = u_time*.1;\n  float r = dot(st,st);\n  float a = atan(st.y,st.x)/PI;\n\n  st = vec2(a,r);\n\n  float num = 9.;\n  st *= vec2(num,pow(num,1.582*(1.0-r)));\n\n  vec2 ipos = floor(st);\n  vec2 fpos = fract(st);\n\n  if (ipos.y == 2. && r < .3) {\n    vec3 normal = sphereNormal(fpos)*2.0-1.0;\n    t += ipos.x*3.14*0.1;\n    pLight.direction = normalize(vec3(cos(t),0.,sin(t)));\n    computeLight(pLight,m,normal,normal,l);\n    color = calculate(m,l);\n    color *= circle(fpos, .8);\n  }\n  \n  gl_FragColor = vec4(color,0.6);\n}\n"},"title":"moonshine"},{"id":"cd0bf467-aac1-4ee3-9f6c-6cccfa5da475","type":"MeshNode","x":266.20512820512795,"y":500.6153846153845,"state":{}},{"id":"9b5b88ca-42e6-46d8-9ee1-840049026753","type":"ShaderMaterialNode","x":27.89743589743557,"y":548.8803418803423,"state":{}},{"id":"e1a202e5-8436-4f87-a6a9-6e883cdfafad","type":"PlaneGeometryNode","x":27.89743589743557,"y":437.76923076923094,"state":{}},{"id":"fda0e44c-1112-493d-81ef-6a316fb62d1c","type":"ThreeNode","x":539.358974358974,"y":494.7606837606836,"state":{}},{"id":"92b7f150-1474-43b7-b893-ad1ad91f5d4a","type":"number","x":-209.564102564103,"y":726.615384615385,"state":{"value":100}},{"id":"3b02e198-2006-4b20-9301-e47905fc35e3","type":"Vector3D","x":27.89743589743557,"y":675.769230769231,"state":{"value":"{\"x\":100,\"y\":100,\"z\":100}"}},{"id":"cea67ca3-26ea-460e-bf40-e47e58d65cf2","type":"number","x":266.20512820512795,"y":338.6153846153845,"state":{"value":100}},{"id":"ed609fcc-f0c3-498e-b53e-e644c43c6783","type":"LoadTextureNode","x":539.358974358974,"y":673.5384615384615,"state":{}},{"id":"ed14651f-01f4-4f78-add4-e36a0a318b28","type":"string","x":266.20512820512795,"y":763.059829059829,"state":{"value":"ms_tex"}},{"id":"34e2d15d-da37-4b50-a599-e4331f25b651","type":"string","x":266.20512820512795,"y":669.9487179487179,"state":{"value":"/img/m-bump.jpg"}},{"id":"32deada5-61e4-486e-9dcb-95753546e712","type":"MidiDevicesNode","x":-209.564102564103,"y":281.5769230769228,"state":{}},{"id":"950fae01-0aac-4715-95a2-e29da9cda8bb","type":"ExtractNode","x":27.89743589743557,"y":283.11538461538436,"state":{}},{"id":"8533b972-b641-4349-b61d-977110091db9","type":"string","x":-209.564102564103,"y":400.03846153846166,"state":{"value":"0.id"}}],"edges":[{"id":"096eef73-c2a5-4b55-95ba-d9b0404a4797","fromId":"5be76875-83f9-4811-8ada-a4f28521bfdb","fromPort":"out","toId":"73e07906-fbbd-4b61-be30-3e31cf2c0b0e","toPort":"density"},{"id":"1ada8405-31fb-4a49-897a-368be4935bf8","fromId":"f501fceb-832a-410a-9bc8-1faf1713a0ed","fromPort":"out","toId":"b4f03856-5c62-4b63-aa12-8ebaf391e4fb","toPort":"tonic"},{"id":"8986c59a-41b8-47b6-866e-71c9c37f9c97","fromId":"b4f03856-5c62-4b63-aa12-8ebaf391e4fb","fromPort":"notes","toId":"066a0f52-d9d6-4bfb-837c-29b30bcb4e1b","toPort":"notes"},{"id":"b99919d7-140f-4fb1-9803-47a31da09a9f","fromId":"066a0f52-d9d6-4bfb-837c-29b30bcb4e1b","fromPort":"chroma","toId":"73e07906-fbbd-4b61-be30-3e31cf2c0b0e","toPort":"scale"},{"id":"d5658463-23bb-4da3-9919-62f3f0023eec","fromId":"cc09a370-193e-453a-929a-5dd7dc2523ea","fromPort":"device","toId":"73e07906-fbbd-4b61-be30-3e31cf2c0b0e","toPort":"midiOut"},{"id":"866e8956-1037-4467-b094-1a552c42e66f","fromId":"e1a202e5-8436-4f87-a6a9-6e883cdfafad","fromPort":"geometry","toId":"cd0bf467-aac1-4ee3-9f6c-6cccfa5da475","toPort":"geometry"},{"id":"2426b5e4-eb70-4d71-be00-f0f0e4f04516","fromId":"4187d10a-3d94-4962-80a2-2e5987aa565b","fromPort":"out","toId":"9b5b88ca-42e6-46d8-9ee1-840049026753","toPort":"fragment"},{"id":"bd81eaee-9fc4-49d5-b1e1-03e22154d5e3","fromId":"9b5b88ca-42e6-46d8-9ee1-840049026753","fromPort":"material","toId":"cd0bf467-aac1-4ee3-9f6c-6cccfa5da475","toPort":"material"},{"id":"08ca984f-4192-4e9d-a912-8f0af42323b9","fromId":"cd0bf467-aac1-4ee3-9f6c-6cccfa5da475","fromPort":"mesh","toId":"fda0e44c-1112-493d-81ef-6a316fb62d1c","toPort":"child"},{"id":"afcf1076-ba2e-49e7-90b4-5e4bfa7beb7c","fromId":"92b7f150-1474-43b7-b893-ad1ad91f5d4a","fromPort":"out","toId":"3b02e198-2006-4b20-9301-e47905fc35e3","toPort":"x"},{"id":"cb947016-591d-4067-b780-46179d765c59","fromId":"92b7f150-1474-43b7-b893-ad1ad91f5d4a","fromPort":"out","toId":"3b02e198-2006-4b20-9301-e47905fc35e3","toPort":"y"},{"id":"af48b944-7a7a-48a1-a76d-41cd30b0cf04","fromId":"92b7f150-1474-43b7-b893-ad1ad91f5d4a","fromPort":"out","toId":"3b02e198-2006-4b20-9301-e47905fc35e3","toPort":"z"},{"id":"fa1884f3-f3ec-46df-8e10-d53bf96af736","fromId":"3b02e198-2006-4b20-9301-e47905fc35e3","fromPort":"out","toId":"cd0bf467-aac1-4ee3-9f6c-6cccfa5da475","toPort":"scale"},{"id":"227a0df8-6f4f-4fb2-89f6-b3513fea9f1c","fromId":"cea67ca3-26ea-460e-bf40-e47e58d65cf2","fromPort":"out","toId":"73e07906-fbbd-4b61-be30-3e31cf2c0b0e","toPort":"stepsPerSecond"},{"id":"ff321be2-56c4-4d66-a5aa-308fe024000d","fromId":"ed14651f-01f4-4f78-add4-e36a0a318b28","fromPort":"out","toId":"ed609fcc-f0c3-498e-b53e-e644c43c6783","toPort":"name"},{"id":"c19f2de8-ccf6-480b-83e7-b6fa5fbe83ec","fromId":"34e2d15d-da37-4b50-a599-e4331f25b651","fromPort":"out","toId":"ed609fcc-f0c3-498e-b53e-e644c43c6783","toPort":"url"},{"id":"a0f7cfe0-dac9-46bb-bb60-deaee8415fb1","fromId":"32deada5-61e4-486e-9dcb-95753546e712","fromPort":"outputs","toId":"950fae01-0aac-4715-95a2-e29da9cda8bb","toPort":"from"},{"id":"7515983d-9eb2-4e83-8974-a501e2473f31","fromId":"8533b972-b641-4349-b61d-977110091db9","fromPort":"out","toId":"950fae01-0aac-4715-95a2-e29da9cda8bb","toPort":"get"},{"id":"97766239-1d5d-4ffd-bd62-d1be0eeb57dc","fromId":"950fae01-0aac-4715-95a2-e29da9cda8bb","fromPort":"out","toId":"cc09a370-193e-453a-929a-5dd7dc2523ea","toPort":"id"}],"meta":{"zoom":12},"description":"RNN -> midi out"}